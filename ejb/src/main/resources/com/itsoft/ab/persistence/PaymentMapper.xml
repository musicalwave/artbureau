<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.itsoft.ab.persistence.PaymentMapper" >
    <resultMap id="paymentsMap" type="PaymentModel">
        <result property="id" column="id"/>
        <result property="contractId" column="contractId"/>
        <result property="date" column="date"/>
        <result property="active" column="active"/>
        <result property="value" column="value"/>
        <result property="direction" column="direction"/>
        <result property="planned" column="planned"/>
        <result property="special" column="special"/>
        <result property="approved" column="approved"/>
        <result property="approvedBy" column="approvedBy"/>
        <result property="approvedDate" column="approvedDate"/>
        <result property="approvedName" column="approvedName"/>
        <result property="comment" column="comment"/>

        <result property="typeS" column="typeS"/>
        <result property="teacherS" column="teacherS"/>
        <result property="dateS" column="dateS"/>
        <result property="contractSpecial" column="contractSpecial"/>
        <result property="clientId" column="clientId"/>
        <result property="clientS" column="clientS"/>

    </resultMap>

    <sql id="selectAllFields">
        SELECT payments.id, payments.contractId, payments.date, payments.value, payments.direction, payments.planned, payment.done, payment.approved
    </sql>

    <select id="selectPayment" parameterType="int" resultType="PaymentModel">
        SELECT
        payments.id,
        payments.contractId,
        payments.date,
        payments.value,
        payments.direction,
        payments.planned,
        payments.done,
        payments.approved,
        payments.approvedDate,
        payments.comment,
        contracts.special AS contractSpecial
        FROM payments, contracts
        WHERE payments.id = #{id}
        AND contracts.id = payments.contractId
    </select>

    <select id="getPlannedClientPayments" parameterType="int" resultMap="paymentsMap">
        SELECT
        payments.id,
        payments.date,
        payments.value,
        teachers.name AS teacherS,
        types.name AS typeS
        FROM payments, teachers, types, contracts, J_TEACHERS_TYPES
        WHERE
        payments.contractId = contracts.id
        AND payments.planned = 1
        AND payments.done = 0
        AND contracts.clientId = #{id}
        AND contracts.statusId = 1
        AND contracts.teacherTypeId = J_TEACHERS_TYPES.id
        AND J_TEACHERS_TYPES.teacherId = teachers.id
        AND J_TEACHERS_TYPES.typeId = types.id
        ORDER BY payments.date ASC
    </select>

    <select id="getClientPayments" parameterType="int" resultMap="paymentsMap">
        SELECT
        payments.id,
        payments.date,
        payments.value,
        payments.done,
        payments.planned,
        payments.approved,
        teachers.name AS teacherS,
        types.name AS typeS
        FROM payments, teachers, types, contracts, J_TEACHERS_TYPES
        WHERE
        payments.contractId = contracts.id
        AND contracts.clientId = #{id}
        AND contracts.statusId = 1
        AND contracts.teacherTypeId = J_TEACHERS_TYPES.id
        AND J_TEACHERS_TYPES.teacherId = teachers.id
        AND J_TEACHERS_TYPES.typeId = types.id
        ORDER BY payments.date DESC
    </select>

    <select id="getContractPayments" parameterType="int" resultMap="paymentsMap">
        SELECT
        payments.*
        FROM payments
        WHERE
        payments.contractId = #{id}
        ORDER BY payments.date ASC
    </select>

    <insert id="insertPayment" parameterType="PaymentModel">
        INSERT INTO payments (contractId, date, value, direction, planned, done)
        VALUES (
        #{contractId, javaType=int, jdbcType=INTEGER},
        #{date, javaType=long, jdbcType=BIGINT},
        #{value, javaType=int, jdbcType=INTEGER},
        #{direction, javaType=int, jdbcType=TINYINT},
        #{planned, javaType=int, jdbcType=TINYINT},
        #{done, javaType=int, jdbcType=TINYINT})
    </insert>

    <update id="updateDone" parameterType="PaymentModel">
        UPDATE payments SET
        done = #{done, javaType=int, jdbcType=TINYINT}
        WHERE id = #{id}
    </update>

    <update id="updateComment" parameterType="PaymentModel">
        UPDATE payments SET
        comment = #{comment}
        WHERE id = #{id}
    </update>

    <update id="updateDate" parameterType="PaymentModel">
        UPDATE payments SET
        date = #{date}
        WHERE id = #{id}
    </update>

    <update id="updateApproved" parameterType="PaymentModel">
        UPDATE payments SET
        approved = #{approved},
        approvedBy = #{approvedBy},
        approvedDate = #{approvedDate}
        WHERE id = #{id}
    </update>

    <update id="updateActive" parameterType="PaymentModel">
        UPDATE payments SET
        active = #{active}
        WHERE id = #{id}
    </update>

    <select id="getPlannedPayments" parameterType="map" resultType="PaymentModel">
        SELECT
        payments.id,
        payments.date,
        payments.value,
        teachers.name AS teacherS,
        contracts.clientId AS clientId,
        contracts.id AS contractId,
        contracts.cash AS cash,
        CONCAT(clients.lname, ' ', clients.fname) AS clientS,
        types.name AS typeS
        FROM payments, teachers, types, contracts, clients, J_TEACHERS_TYPES
        WHERE
        contracts.id = payments.contractId
        AND clients.id = contracts.clientId
        AND payments.planned = 1
        AND contracts.statusId = 1
        AND payments.date &gt;= #{fromDate} AND payments.date &lt; #{toDate}
        AND contracts.teacherTypeId = J_TEACHERS_TYPES.id
        AND J_TEACHERS_TYPES.teacherId = teachers.id
        AND J_TEACHERS_TYPES.typeId = types.id
        ORDER BY payments.date ASC
    </select>

    <select id="getDonePayments" parameterType="map" resultType="PaymentModel">
        SELECT
        payments.id,
        payments.date,
        payments.value,
        payments.comment,
        teachers.name AS teacherS,
        contracts.clientId AS clientId,
        contracts.id AS contractId,
        contracts.cash AS cash,
        CONCAT(clients.lname, ' ', clients.fname) AS clientS,
        types.name AS typeS
        FROM payments, teachers, types, contracts, clients, J_TEACHERS_TYPES
        WHERE
        contracts.id = payments.contractId
        AND clients.id = contracts.clientId
        AND payments.done = 1
        AND contracts.statusId = 1
        AND payments.date &gt;= #{fromDate} AND payments.date &lt; #{toDate}
        AND contracts.teacherTypeId = J_TEACHERS_TYPES.id
        AND J_TEACHERS_TYPES.teacherId = teachers.id
        AND J_TEACHERS_TYPES.typeId = types.id
        ORDER BY payments.date ASC
    </select>

    <select id="getPlannedPaymentsByDate" parameterType="String" resultMap="paymentsMap">
        SELECT
          c.id as clientId,
          concat(c.fname, " ", c.lname) as clientS,
          c.phone1 as comment,
          p.value,
          t.name as teacherS,
          ty.name as typeS,
          con.id as contractId
        FROM clients c
          INNER JOIN contracts con
            ON con.clientId = c.id
          INNER JOIN J_TEACHERS_TYPES jtt
            ON jtt.id = con.teacherTypeId
          INNER JOIN teachers t
            ON t.id = jtt.teacherId
          INNER JOIN types ty
            ON ty.id = jtt.typeId
          INNER JOIN payments p
            ON p.contractId = con.id
         WHERE p.planned = 1 AND (FROM_UNIXTIME(p.date / 1000)) = #{date}
    </select>
</mapper>