<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.itsoft.ab.persistence.ScheduleMapper">

    <!--All queries here-->

    <sql id="Lesson">
        l.id, l.eventId, l.statusId, l.date, l.contractId, l.shiftedByClient, l.shiftedByTeacher
    </sql>

    <sql id="Event">
        id, weekday, roomId, startTime, finishTime, teacherId, active, comment
    </sql>

    <sql id="EventLessonDate">
        e.id as eventId, e.weekday, #{date} as date,
        e.startTime,
        e.finishTime as finishTime,
        e.roomId,
        r.name as roomName,
        e.teacherId as teacherId,
        t.name as teacherName,
        (l.id IS NOT NULL) as hasLesson,
        l.id as lessonId,
        l.contractId,
        con.clientId,
        CONCAT(clients.lname, clients.fname) as clientName,
        clients.phone1 as clientPhone,
        types.id as typeId,
        types.name as typeName,
        con.contractType as clientStatus,
        l.statusId as doneStatus,
        (con.trial+1) as contractStatus,
        (l.statusId IS NULL) as needSetStatus,
        0 as hasTask,
        0 as hasPayment

        FROM events e
	    LEFT JOIN (SELECT * FROM lessons where lessons.date=#{date}) l ON e.id=l.eventId
	    JOIN teachers t ON t.id=e.teacherId
	    JOIN rooms r ON e.roomId=r.id
	    LEFT JOIN contracts con ON l.contractId=con.id
	    LEFT JOIN clients on con.clientId=clients.id
	    LEFT JOIN J_TEACHERS_TYPES on J_TEACHERS_TYPES.id=con.teacherTypeId
	    LEFT JOIN types on J_TEACHERS_TYPES.typeId=types.id
	    LEFT JOIN contractsType on con.contractType=contractsType.id
    </sql>

    <!--Event + Lesson -->
    <select id="getLesson" parameterType="int" resultType="LessonWeb">
        SELECT
        e.id as eventId, e.weekday, l.date,
        e.startTime, e.finishTime as finishTime, e.roomId,
        r.name as roomName, e.teacherId as teacherId,
        t.name as teacherName, (l.id IS NOT NULL) as hasLesson, l.id as lessonId,
        l.contractId, con.clientId, clients.lname as clientName, clients.phone1 as clientPhone,
        types.id as typeId, types.name as typeName,
        con.contractType as clientStatus, l.statusId as doneStatus,
        (con.trial+1) as contractStatus, (l.statusId IS NULL) as needSetStatus,
        0 as hasTask, 0 as hasPayment

        FROM events e
	    JOIN lessons l ON e.id=l.eventId
	    JOIN teachers t ON t.id=e.teacherId
	    JOIN rooms r ON e.roomId=r.id
	    LEFT JOIN contracts con ON l.contractId=con.id
	    LEFT JOIN clients on con.clientId=clients.id
	    LEFT JOIN J_TEACHERS_TYPES on J_TEACHERS_TYPES.id=con.teacherTypeId
	    LEFT JOIN types on J_TEACHERS_TYPES.typeId=types.id
	    LEFT JOIN contractsType on con.contractType=contractsType.id
        WHERE l.id=#{id}
    </select>
    <select id="selectEventsByDate" parameterType="java.sql.Date" resultType="LessonWeb">
        SELECT
        <include refid="EventLessonDate" />
        WHERE e.weekday=(weekday(#{date})+1) AND e.active=1
    </select>
    <select id="selectEventsByDateAndClass" resultType="LessonWeb">
        SELECT
        <include refid="EventLessonDate" />
        WHERE e.weekday=(weekday(#{date})+1) AND e.roomId=#{roomId} AND e.active=1
    </select>
    <select id="selectEventsByDateAndTeacher" resultType="LessonWeb">
        SELECT
        <include refid="EventLessonDate" />
        WHERE e.weekday=(weekday(#{date})+1) AND e.teacherId=#{teacherId} AND e.active=1
    </select>

    <!--Event -->
    <select id="getEvent" parameterType="int" resultType="LessonWeb">
        SELECT e.id as eventId, e.weekday, e.startTime, e.finishTime as finishTime, e.roomId, r.name as roomName, e.teacherId as teacherId, t.name as teacherName
        FROM events e
        JOIN teachers t ON t.id=e.teacherId
	    JOIN rooms r ON e.roomId=r.id
        WHERE e.id=#{id}
    </select>
    <select id="selectAllByClass" parameterType="int" resultType="LessonWeb">
        SELECT e.id as eventId, e.weekday, e.startTime, e.finishTime as finishTime, e.roomId, r.name as roomName, e.teacherId as teacherId, t.name as teacherName
        FROM events e
        JOIN teachers t ON t.id=e.teacherId
	    JOIN rooms r ON e.roomId=r.id
        WHERE e.roomId=#{id} AND e.active=1
    </select>
    <select id="selectAllByTeacher" parameterType="int" resultType="LessonWeb">
        SELECT e.id as eventId, e.weekday, e.startTime, e.finishTime as finishTime, e.roomId, r.name as roomName, e.teacherId as teacherId, t.name as teacherName
        FROM events e
        JOIN teachers t ON t.id=e.teacherId
	    JOIN rooms r ON e.roomId=r.id
        WHERE e.teacherId=#{id} AND e.active=1
    </select>
    <select id="selectAllActive" resultType="LessonWeb">
        SELECT e.id as eventId, e.weekday, e.startTime, e.finishTime as finishTime, e.roomId, r.name as roomName, e.teacherId as teacherId, t.name as teacherName
        FROM events e
        JOIN teachers t ON t.id=e.teacherId
	    JOIN rooms r ON e.roomId=r.id
        WHERE e.active=1
    </select>

    <select id="selectAllEvents" resultType="EventModel">
        SELECT e.id,
               e.weekday,
               e.startTime,
               e.finishTime,
               e.roomId,
               e.teacherId,
               r.name as roomS,
               t.name as teacherName
        FROM events e
        INNER JOIN rooms r
        ON r.id = e.roomId
        INNER JOIN teachers t
        ON t.id = e.teacherId
        WHERE e.active = 1;
    </select>

    <!--проверка возможности создания занятия (преподаватель, дата начала, время занятия) -->
    <select id="countLessons" resultType="int">
        SELECT COUNT(*)
        FROM lessons
        WHERE eventId=#{eventId} AND date=#{date, javaType=java.sql.Date, jdbcType=DATE}
    </select>

    <select id="countLessonsByTeacherAndTime" resultType="int">
        SELECT COUNT(l.id)
        FROM lessons l, events e
        WHERE e.teacherTypeId=#{teacherTypeId} AND l.eventId=e.id
        AND e.startTime=#{startTime} AND l.date=#{date, javaType=java.sql.Date, jdbcType=DATE}
    </select>

    <update id="shiftLesson">
        UPDATE lessons l, contracts c
        SET l.eventId = #{eventId},
            l.date = #{newDate},
            c.countShifts = c.countShifts + 1
        WHERE l.id = #{lessonId}
          AND l.contractId = c.id
    </update>

    <select id="selectEmptyEventsByTeacher" parameterType="map" resultType="EventModel">
        SELECT
          e.id,
          e.weekday,
          e.startTime,
          e.finishTime,
          w.name as weekdayS,
          r.name as roomS
        FROM events e
        LEFT JOIN weekdays w
          ON w.id = e.weekday
        LEFT JOIN rooms r
          ON r.id = e.roomId
        WHERE e.teacherId = #{teacherId} AND e.active = 1
        ORDER BY e.weekday, e.startTime
    </select>

    <select id="getEmptyEventsByTeacherAndRoom" resultType="EventModel">
        SELECT e.id,
               e.startTime,
               e.finishTime,
               e.weekday
        FROM events e
        WHERE e.teacherId = #{teacherId} AND e.roomId = #{roomId}
    </select>

    <select id="getLessonsByRoom" resultType="LessonWeb">
        SELECT
               l.id as lessonId,
               l.date,
               e.startTime,
               e.finishTime,
               co.clientId,
               concat(c.fname, ' ', c.lname) as clientName,
               c.phone1 as clientPhone,
               jtt.teacherId,
               e.roomId,
               l.statusId as doneStatus,
               t.name as teacherName
        FROM lessons l
        INNER JOIN events e
        ON e.id = l.eventId
        INNER JOIN contracts co
        ON co.id = l.contractId
        INNER JOIN clients c
        ON c.id = co.clientId
        INNER JOIN J_TEACHERS_TYPES jtt
         ON jtt.id = co.teacherTypeId
        INNER JOIN teachers t
         ON t.id = jtt.teacherId
        WHERE e.roomId = #{roomId} AND (l.date BETWEEN #{leftDate} AND #{rightDate})
    </select>

    <select id="getEmptyEvent" resultType="EventModel">
        SELECT *
        FROM events e
        LEFT JOIN lessons l
        ON l.eventId = e.id AND l.date = #{date}
        WHERE e.teacherId = #{teacherId}
          AND e.roomId = #{roomId}
          AND e.weekday = #{weekday}
          AND e.startTime = #{startTime}
          AND e.finishTime = #{finishTime}
          AND l.id IS NULL
    </select>

    <update id="updateContractSchedule">
        DELETE FROM contractSchedule
        WHERE contractId = #{contractId};

        INSERT INTO contractSchedule(contractId, eventId)
        VALUES
        <foreach collection="eventIds" item="eventId" separator=",">
            (#{contractId}, #{eventId})
        </foreach>

    </update>

    <select id="getContractSchedule" resultType="EventModel">
        SELECT
          e.id,
          e.weekday,
          e.startTime,
          e.finishTime,
          w.name as weekdayS,
          r.name as roomS,
          cs.id as contractScheduleId
        FROM contractSchedule cs
          INNER JOIN events e
            ON e.id = cs.eventId
          INNER JOIN weekdays w
            ON w.id = e.weekday
          INNER JOIN rooms r
            ON r.id = e.roomId
        WHERE cs.contractId = #{contractId}
        ORDER BY e.weekday, e.startTime
    </select>

    <insert id="insertContractScheduleEvent">
        INSERT INTO contractSchedule(contractId, eventId)
        VALUES(#{contractId}, #{eventId})
    </insert>

    <update id="updateContractScheduleEvent">
        UPDATE contractSchedule
        SET eventId = #{eventId}
        WHERE id = #{contractScheduleId}
    </update>

    <delete id="deleteContractScheduleEvent">
        DELETE FROM contractSchedule
        WHERE id = #{contractScheduleId}
    </delete>

</mapper>