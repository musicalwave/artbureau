<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.itsoft.ab.persistence.LessonsMapper" >

    <resultMap id="result" type="LessonModel">
        <result property="id" column="id"/>
        <result property="eventId" column="eventId"/>
        <result property="statusId" column="statusId"/>
        <result property="contractId" column="contractId"/>
        <result property="shiftedByClient" column="shiftedByClient"/>
        <result property="shiftedByTeacher" column="shiftedByTeacher"/>
        <result property="date" column="date"/>

        <result property="roomId" column="roomId"/>
        <result property="roomName" column="roomName"/>
        <result property="fromTime" column="fromTime"/>
        <result property="toTime" column="toTime"/>
        <result property="statusName" column="statusName"/>
        <result property="contractType" column="contractType"/>
        <result property="temporary" column="temporary"/>
        <result property="shiftedTo" column="shiftedTo"/>
        <result property="cancelled" column="cancelled"/>
    </resultMap>

    <!--All queries here-->

    <select id="getContractLessons" parameterType="int" resultMap="result">
        SELECT
          l.id,
          l.contractId,
          l.eventId,
          l.statusId,
          l.shiftedByClient,
          l.shiftedByTeacher,
          l.date,
          l.fromTime,
          l.toTime,
          l.cancelled,
          l.shiftedTo,
          l.temporary,
          r.id AS roomId,
          r.name AS roomName,
          ls.name AS statusName
        FROM lessons l
        INNER JOIN rooms r
          ON r.id = l.roomId
        INNER JOIN lessonsStatus ls
          ON ls.id = l.statusId
        WHERE l.contractId = #{id}
        ORDER BY l.date, l.fromTime
    </select>

    <select id="getLessonContract" parameterType="int" resultType="ContractModel">
        SELECT c.*
        FROM lessons l
        INNER JOIN contracts c
          ON c.id = l.contractId
        WHERE l.id = #{id}
    </select>

    <select id="getLesson" parameterType="int" resultType="LessonModel">
        SELECT
        lessons.*,
        contracts.contractType AS contractType
        FROM lessons, contracts
        WHERE lessons.id = #{id}
        AND contracts.id = lessons.contractId
    </select>

    <select id="getOriginalLesson" parameterType="int" resultType="LessonModel">
        SELECT l.*
        FROM lessons l
        WHERE shiftedTo = #{id}
    </select>

    <update id="updateStatus" parameterType="LessonModel">
        UPDATE lessons SET
        lessons.statusId = #{statusId}
        WHERE
        lessons.id = #{id}
    </update>

    <update id="updateCancelled">
        UPDATE lessons
          SET cancelled = #{cancelled}
        WHERE id = #{lessonId}
    </update>

    <insert id="insertLesson" parameterType="LessonModel" keyProperty="id">
        INSERT INTO lessons (
          statusId,
          contractId,
          shiftedByClient,
          shiftedByTeacher,
          date,
          fromTime,
          toTime,
          roomId,
          payment,
          task,
          temporary)
        VALUES (
          #{statusId},
          #{contractId},
          #{shiftedByClient},
          #{shiftedByTeacher},
          #{date},
          #{fromTime},
          #{toTime},
          #{roomId},
          #{payment},
          #{task},
          #{temporary});

          <selectKey keyProperty="id" resultType="int" order="AFTER">
              SELECT LAST_INSERT_ID() as id;
          </selectKey>
    </insert>

    <delete id="deleteLesson" parameterType="int">
        DELETE FROM lessons
        WHERE id = #{id}
    </delete>

    <select id="getContractLessonsBetweenDates" parameterType="map" resultType="LessonModel">
        SELECT
        lessons.*
        FROM lessons
        WHERE lessons.contractId = #{id}
        AND lessons.date &gt;= #{startdate}
        AND lessons.date &lt;= #{finishdate}
        AND lessons.statusId = 1
    </select>

    <select id="getLastLessons" parameterType="map" resultType="LessonWeb">
        SELECT
        lessons.contractId AS contractId,
        lessons.eventId AS eventId,
        lessons.payment AS hasPayment,
        lessons.task AS hasTask,
        lessons.date AS date,
        events.startTime AS startTime,

        teachers.name AS teacherName,
        teachers.id AS teacherId,
        types.name AS typeName,
        CONCAT(clients.lname, ' ', clients.fname) AS clientName,
        clients.id AS clientId

        FROM lessons, types, contracts, teachers, clients, J_TEACHERS_TYPES, events
        WHERE lessons.statusId = 1
        AND lessons.date &gt;= #{fromDate}
        AND lessons.date &lt; #{toDate}
        AND lessons.contractId IN (
              SELECT lessons.contractId
              FROM lessons
              WHERE lessons.statusId = 1
              GROUP BY lessons.contractId
              HAVING COUNT(lessons.contractId) = 1
        )
        AND contracts.id = lessons.contractId
        AND clients.id = contracts.clientId
        AND teachers.id = J_TEACHERS_TYPES.teacherId
        AND types.id = J_TEACHERS_TYPES.typeId
        AND J_TEACHERS_TYPES.id = contracts.teacherTypeId
        AND events.id = lessons.eventId
        ORDER BY events.startTime ASC
    </select>

    <update id="updateLesson" parameterType="LessonModel">
       UPDATE lessons
       SET
         date = #{lesson.date},
         statusId = #{lesson.statusId},
         fromTime = #{lesson.fromTime},
         toTime = #{lesson.toTime},
         roomId = #{lesson.roomId}
       WHERE id = #{lesson.id}
    </update>

    <update id="updateShiftedTo">
        UPDATE lessons
        SET shiftedTo = #{shiftedTo}
        WHERE id = #{lessonId}
    </update>

    <select id="getLessonsWithinPeriod" resultType="LessonModel">
        SELECT *
        FROM lessons l
        WHERE l.contractId = #{contractId}
          AND (l.date BETWEEN #{dateFrom} AND DATE_ADD(#{dateTo}, INTERVAL 1 DAY))
          AND l.statusId = #{statusId}
    </select>

    <delete id="deleteLessonsWithinPeriod">
        DELETE FROM lessons
        WHERE contractId = #{contractId}
          AND (date BETWEEN #{dateFrom} AND DATE_ADD(#{dateTo}, INTERVAL 1 DAY))
          AND statusId = #{statusId}
    </delete>

    <select id="getLessonStatuses" resultType="SimpleModel">
        SELECT id, name
        FROM lessonsStatus
    </select>
</mapper>