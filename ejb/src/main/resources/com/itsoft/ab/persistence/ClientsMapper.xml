<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.itsoft.ab.persistence.ClientsMapper" >

    <resultMap id="clientsMap" type="ClientModel">
        <result property="id" column="id"/>
        <result property="fname" column="fname"/>
        <result property="lname" column="lname"/>
        <result property="pname" column="pname"/>
        <result property="phone1" column="phone1"/>
        <result property="phone1" column="phone1name"/>
        <result property="phone2" column="phone2"/>
        <result property="phone2" column="phone2name"/>
        <result property="moneyR" column="moneyR"/>
        <result property="moneyV" column="moneyV"/>
        <result property="comment" column="comment"/>
        <result property="statusId" column="statusId"/>
        <result property="ratingId" column="ratingId"/>
        <result property="fromSite" column="fromSite"/>
        <result property="date" column="date"/>
        <result property="email" column="email"/>
        <result property="bdate" column="bdate"/>
        <result property="jdata" column="jdata"/>
        <result property="hasJdata" column="hasJdata"/>

    </resultMap>

    <!--All queries here-->

    <sql id="selectAllFields">
        SELECT clients.id,
        clients.fname,
        clients.lname,
        clients.pname,
        clients.phone1,
        clients.phone2,
        clients.phone1name,
        clients.phone2name,
        clients.moneyR,
        clients.moneyV,
        clients.comment,
        clients.statusId,
        clients.ratingId,
        clients.fromSite,
        clients.email,
        clients.bdate,
        clients.hasJdata
    </sql>

    <select id="getAllClients" resultMap="clientsMap">
        <include refid="selectAllFields"/>
        FROM clients
    </select>

    <select id="getClientById" parameterType="int" resultType="ClientModel">
        <include refid="selectAllFields"/>,
        COUNT(concerts.id) AS concerts
        FROM clients, concerts
        WHERE clients.id = #{id}
        AND concerts.clientId = clients.id
    </select>

    <select id="getClientWithContractDataById" parameterType="int" resultType="ClientModel">
        SELECT
          c.id,
          c.fname,
          c.lname,
          c.pname,
          c.phone1,
          c.bdate,
          c.email,
          min(co.date) AS firstContractDate,
          count(co.id) AS countContracts,
          COALESCE(SUM(CASE WHEN co.statusId = 1 THEN 1 ELSE 0 END), 0) AS countActiveContracts,
          COALESCE(SUM(co.price), 0) AS total
        FROM clients c
          LEFT JOIN contracts co
          ON co.clientId = c.id AND co.statusId != 3
        WHERE c.id = #{id}
        GROUP BY c.id;
    </select>

    <select id="getClientByContract" parameterType="int" resultType="ClientModel">
        <include refid="selectAllFields"/>,
        COUNT(concerts.id) AS concerts
        FROM clients, concerts, contracts
        WHERE contracts.id = #{id}
        AND clients.id = contracts.clientId
        AND concerts.clientId = clients.id
    </select>

    <select id="getDonePaymentsTotal" parameterType="int" resultType="int">
        SELECT COALESCE(SUM(p.value), 0)
        FROM contracts con
        LEFT JOIN payments p
          ON p.contractId = con.id
        LEFT JOIN contractsStatus cs
          ON cs.id = con.statusId
        WHERE p.done AND con.clientId = #{id} AND NOT cs.deleted;
    </select>

    <select id="getPlannedPaymentsTotal" parameterType="int" resultType="int">
        SELECT COALESCE(SUM(p.value), 0)
        FROM contracts con
        LEFT JOIN payments p
          ON p.contractId = con.id
        LEFT JOIN contractsStatus cs
          ON cs.id = con.statusId
        WHERE p.planned AND NOT p.done AND con.clientId = #{id} AND NOT cs.deleted;
    </select>

    <select id="getIdByObject" parameterType="ClientModel" resultType="int">
        SELECT id FROM clients WHERE
        fname = #{fname} AND lname = #{lname} AND phone1 = #{phone1}
    </select>

    <select id="getIdByPhone1" parameterType="String" resultType="int">
        SELECT id FROM clients WHERE
        phone1 = #{phone1}
    </select>

    <select id="findClients" parameterType="map" resultMap="clientsMap">
        SELECT
        clients.id,
        clients.fname,
        clients.lname,
        clients.pname,
        clients.phone1,
        clients.phone2,
        clients.email,
        clients.bdate
        FROM clients
        <where>
            clients.statusId = 1 AND
            <if test="fname != null">
                clients.fname LIKE #{fname}
                <if test="lname != null">
                    AND clients.lname LIKE #{lname}
                </if>
                <if test="phone != null">
                    AND (clients.phone1 = #{phone} OR clients.phone2 = #{phone})
                </if>
                <if test="bdate != null">
                    AND clients.bdate = #{bdate}
                </if>
                <if test="email != null">
                    AND email = #{email}
                </if>
                <if test="comment != null">
                    AND comment LIKE #{comment}
                </if>
            </if>
            <if test="fname == null">
                <if test="lname != null">
                    clients.lname LIKE #{lname}
                    <if test="phone != null">
                        AND (clients.phone1 = #{phone} OR clients.phone2 = #{phone})
                    </if>
                    <if test="bdate != null">
                        AND clients.bdate = #{bdate}
                    </if>
                    <if test="email != null">
                        AND email = #{email}
                    </if>
                    <if test="comment != null">
                        AND comment LIKE #{comment}
                    </if>
                </if>
                <if test="lname == null">
                    <if test="phone != null">
                        (clients.phone1 = #{phone} OR clients.phone2 = #{phone})
                        <if test="bdate != null">
                            AND clients.bdate = #{bdate}
                        </if>
                        <if test="email != null">
                            AND email = #{email}
                        </if>
                        <if test="comment != null">
                            AND comment LIKE #{comment}
                        </if>
                    </if>
                    <if test="phone == null">
                        <if test="bdate != null">
                            clients.bdate = #{bdate}
                            <if test="email != null">
                                AND email = #{email}
                            </if>
                            <if test="comment != null">
                                AND comment LIKE #{comment}
                            </if>
                        </if>
                        <if test="bdate == null">
                            <if test="email != null">
                                email = #{email}
                                <if test="comment != null">
                                    AND comment LIKE #{comment}
                                </if>
                            </if>
                            <if test="email == null">
                                <if test="comment != null">
                                    comment LIKE #{comment}
                                </if>
                            </if>
                        </if>
                    </if>
                </if>
            </if>
        </where>
    </select>


    <insert id="insertClient" parameterType="ClientModel">
        INSERT INTO clients (fname, lname, pname, phone1, phone2, phone1name, phone2name, jdata, hasJdata, bdate, email, comment)
        VALUES (#{fname, javaType=String, jdbcType=VARCHAR},
        #{lname, javaType=String, jdbcType=VARCHAR},
        #{pname, javaType=String, jdbcType=VARCHAR},
        #{phone1, javaType=String, jdbcType=VARCHAR},
        #{phone2, javaType=String, jdbcType=VARCHAR},
        #{phone1name, javaType=String, jdbcType=VARCHAR},
        #{phone2name, javaType=String, jdbcType=VARCHAR},
        #{jdata, javaType=String, jdbcType=VARCHAR},
        #{hasJdata, javaType=int, jdbcType=INTEGER},
        #{bdate, javaType=String, jdbcType=VARCHAR},
        #{email, javaType=String, jdbcType=VARCHAR},
        #{comment, javaType=String, jdbcType=VARCHAR});
        <selectKey resultType="int" keyProperty="id" order="AFTER">
            SELECT LAST_INSERT_ID();
        </selectKey>
    </insert>

    <update id="updateClientPart" parameterType="ClientModel">
        UPDATE clients SET
        fname = #{fname},
        lname = #{lname},
        phone1 = #{phone1},
        phone2 = #{phone2},
        comment = #{comment}
        WHERE id = #{id}
    </update>

    <update id="updateClient" parameterType="ClientModel">
        UPDATE clients SET
        fname = #{fname},
        lname = #{lname},
        pname = #{pname},
        phone1 = #{phone1},
        phone1name = #{phone1name},
        phone2 = #{phone2},
        phone2name = #{phone2name},
        comment = #{comment},
        bdate = #{bdate},
        email = #{email},
        jdata = #{jdata},
        hasJdata = #{hasJdata}
        WHERE id = #{id}
    </update>

    <select id="getSiteClients" resultMap="clientsMap">
        <include refid="selectAllFields"/>
        FROM clients
        WHERE clients.fromSite = 1
        AND clients.statusId = 1
    </select>

    <update id="updateBalance" parameterType="PaymentModel">
        UPDATE clients, contracts SET
        clients.moneyR = clients.moneyR + #{value},
        clients.moneyV = clients.moneyV + #{value}
        WHERE
        contracts.id = #{contractId}
        AND clients.id = contracts.clientId
    </update>

    <update id="updateVBalance" parameterType="PaymentModel">
        UPDATE clients, contracts SET
        clients.moneyV = clients.moneyV + #{value}
        WHERE
        contracts.id = #{contractId}
        AND clients.id = contracts.clientId
    </update>

    <update id="updateJdata" parameterType="ClientModel">
        UPDATE clients SET
        clients.jdata = #{jdata},
        clients.hasJdata = 1
        WHERE
        clients.id = #{id}
    </update>

    <select id="getClientJdataById" parameterType="int" resultType="ClientModel">
        SELECT clients.id,
        clients.fname,
        clients.lname,
        clients.jdata,
        clients.hasJdata
        FROM clients
        WHERE clients.id = #{id}
    </select>

    <select id="getSiteUndoneClients" resultMap="clientsMap">
        SELECT clients.id,
        clients.fname,
        clients.lname,
        clients.phone1,
        clients.comment,
        clients.email
        FROM clients
        WHERE clients.fromSite = 1
        AND clients.fromSiteDone = 0
        AND clients.statusId = 1
    </select>

    <update id="deleteClient" parameterType="int">
        UPDATE clients SET
        clients.statusId = 2
        WHERE
        clients.id = #{id}
    </update>

</mapper>