<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.itsoft.ab.persistence.ContractsMapper" >

    <resultMap id="result" type="ContractModel">
        <result property="id" column="id"/>
        <result property="clientId" column="clientId"/>
        <result property="teacherTypeId" column="teacherTypeId"/>
        <result property="countLessons" column="countLessons"/>
        <result property="statusId" column="statusId"/>
        <result property="date" column="date"/>
        <result property="countShifts" column="countShifts"/>
        <result property="special" column="special"/>
        <result property="freezed" column="freezed"/>
        <result property="freezeDate" column="freezeDate"/>
        <result property="freezeFinishDate" column="freezeFinishDate"/>
        <result property="cash" column="cash"/>
        <result property="price" column="price"/>
        <result property="moneyR" column="moneyR"/>
        <result property="moneyV" column="moneyV"/>
        <result property="active" column="active"/>
        <result property="trial" column="trial"/>
        <result property="contractOptionId" column="contractOptionId"/>
        <result property="writeoff" column="writeoff"/>

        <result property="statusS" column="statusS"/>
        <result property="typeId" column="typeId"/>
        <result property="typeS" column="typeS"/>
        <result property="contractTypeS" column="contractTypeS"/>
        <result property="contractOptionS" column="contractOptionS"/>
        <result property="balance" column="balance"/>
        <result property="teacherId" column="teacherId"/>
        <result property="teacherS" column="teacherS"/>
        <result property="clientFS" column="clientFS"/>
        <result property="clientLS" column="clientLS"/>
    </resultMap>

    <!--All queries here-->

    <select id="getActiveClientContracts" parameterType="int" resultType="ContractModel">
        SELECT
        contracts.id,
        contracts.freezed,
        contracts.countShifts,
        contracts.date,
        contracts.price,
        teachers.name AS teacherS,
        teachers.id AS teacherId,
        types.name AS typeS
        FROM contracts, teachers, types, J_TEACHERS_TYPES
        WHERE
        contracts.clientId = #{id}
        AND contracts.active = 1
        AND contracts.teacherTypeId = J_TEACHERS_TYPES.id
        AND J_TEACHERS_TYPES.teacherId = teachers.id
        AND J_TEACHERS_TYPES.typeId = types.id
        ORDER BY contracts.date DESC
    </select>

    <select id="getActiveTeacherContracts" parameterType="int" resultMap="result">
        SELECT contracts.id,
        contracts.freezed,
        contracts.statusId,
        contracts.countShifts,
        clients.fname AS clientFS,
        clients.lname AS clientLS
        FROM clients, contracts
        WHERE contracts.active = 1
        AND clients.id = contracts.clientId
        AND contracts.id
        IN (SELECT contracts.id FROM contracts WHERE contracts.teacherTypeId
        IN (SELECT J_TEACHERS_TYPES.id FROM J_TEACHERS_TYPES WHERE J_TEACHERS_TYPES.teacherId=#{id}))
    </select>

    <select id="getTeacherContracts" parameterType="int" resultMap="result">
        SELECT contracts.id,
        contracts.freezed,
        contracts.statusId,
        contracts.countShifts,
        clients.fname AS clientFS,
        clients.lname AS clientLS,
        types.name AS typeS
        FROM clients, contracts, types, J_TEACHERS_TYPES
        WHERE clients.id = contracts.clientId
        AND J_TEACHERS_TYPES.id = contracts.teacherTypeId
        AND types.id = J_TEACHERS_TYPES.typeId
        AND contracts.id
        IN (SELECT contracts.id FROM contracts WHERE contracts.teacherTypeId
        IN (SELECT J_TEACHERS_TYPES.id FROM J_TEACHERS_TYPES WHERE J_TEACHERS_TYPES.teacherId=#{id}))
    </select>

    <select id="getClientContracts" parameterType="int" resultMap="result">
        SELECT
          c.id,
          t.name as teacherS,
          t.id as teacherId,
          tp.name as typeS,
          co.name as contractOptionS,
          ct.name as contractTypeS,
          cs.name as statusS,
          c.date,
          c.price,
          c.countLessons,
          c.countShifts,
          c.freezed,
          c.freezeDate,
          c.freezeFinishDate,
          c.contractOptionId,
          c.statusId,
          cs.deleted,
          c.writeoff
        FROM contracts c
          INNER JOIN J_TEACHERS_TYPES jtt
            ON jtt.id = c.teacherTypeId
          INNER JOIN teachers t
            ON t.id = jtt.teacherId
          INNER JOIN types tp
            ON tp.id = jtt.typeId
          INNER JOIN contractOption co
            ON co.id = c.contractOptionId
          INNER JOIN contractsType ct
            ON ct.id = c.contractType
          INNER JOIN contractsStatus cs
            ON cs.id = c.statusId
        WHERE c.clientId = #{clientId}
        GROUP BY c.id
        ORDER BY c.date DESC, c.id DESC;
    </select>

    <select id="selectContract" parameterType="int" resultType="ContractModel">
        SELECT
        contracts.id,
        contracts.freezed,
        contracts.special,
        contracts.date,
        contracts.cash,
        contracts.days,
        teachers.name AS teacherS,
        types.name AS typeS
        FROM contracts, teachers, types, J_TEACHERS_TYPES
        WHERE contracts.id = #{id}
        AND contracts.teacherTypeId = J_TEACHERS_TYPES.id
        AND J_TEACHERS_TYPES.teacherId = teachers.id
        AND J_TEACHERS_TYPES.typeId = types.id
    </select>


    <update id="updateContractMoney" parameterType="PaymentModel">
        UPDATE contracts SET
        contracts.moneyR = contracts.moneyR + #{value},
        contracts.moneyV = contracts.moneyV + #{value}
        WHERE
        contracts.id = #{contractId}
    </update>

    <update id="updateContractVMoney" parameterType="PaymentModel">
        UPDATE contracts, clients SET
        contracts.moneyV = contracts.moneyV + #{value}
        WHERE
        contracts.id = #{contractId}
    </update>

    <update id="updateContractDoMoney" parameterType="PaymentModel">
        UPDATE clients, contracts SET
        clients.moneyR = clients.moneyR + #{value},
        contracts.moneyR = contracts.moneyR + #{value}
        WHERE
        contracts.id = #{contractId}
        AND clients.id = contracts.clientId
    </update>

    <update id="updateDeletePlanned" parameterType="PaymentModel">
        UPDATE clients, contracts SET
        contracts.moneyV = contracts.moneyV - #{value}
        WHERE
        contracts.id = #{contractId}
        AND clients.id = contracts.clientId
    </update>

    <select id="getContractById" parameterType="int" resultType="ContractModel">
        SELECT
        contracts.*,
        clients.fname AS clientFS,
        clients.lname AS clientLS,
        teachers.name AS teacherS,
        teachers.id AS teacherId,
        types.name AS typeS,
        types.id AS typeId

        FROM contracts, clients, teachers, types, J_TEACHERS_TYPES
        WHERE contracts.id = #{id}
        AND J_TEACHERS_TYPES.id = contracts.teacherTypeId
        AND teachers.id = J_TEACHERS_TYPES.teacherId
        AND types.id = J_TEACHERS_TYPES.typeId
        AND clients.id = contracts.clientId
    </select>

    <update id="doLesson" parameterType="LessonModel">
        UPDATE contracts, J_TEACHERS_TYPES, lessons, clients SET
        <if test="contractType == 1">
            contracts.moneyR = contracts.moneyR - J_TEACHERS_TYPES.pPrice,
            clients.moneyR = clients.moneyR - J_TEACHERS_TYPES.pPrice
        </if>
        <if test="contractType == 2">
            contracts.moneyR = contracts.moneyR - J_TEACHERS_TYPES.gPrice,
            clients.moneyR = clients.moneyR - J_TEACHERS_TYPES.gPrice
        </if>
        <if test="contractType == 3">
            contracts.moneyR = contracts.moneyR - J_TEACHERS_TYPES.dPrice,
            clients.moneyR = clients.moneyR - J_TEACHERS_TYPES.dPrice
        </if>
        <if test="contractType == 4">
            contracts.moneyR = contracts.moneyR - J_TEACHERS_TYPES.aPrice,
            clients.moneyR = clients.moneyR - J_TEACHERS_TYPES.aPrice
        </if>
        WHERE lessons.id = #{id}
        AND contracts.id = lessons.contractId
        AND J_TEACHERS_TYPES.id = contracts.teacherTypeId
        AND clients.id = contracts.clientId
    </update>

    <insert id="insertContract" parameterType="ContractModel">
        INSERT INTO contracts (
            clientId,
            teacherTypeId,
            countLessons,
            statusId,
            date,
            countShifts,
            freezed,
            price,
            moneyR,
            moneyV,
            active,
            contractType,
            trial,
            contractOptionId,
            days)
        VALUES (
            #{clientId},
            #{teacherTypeId},
            #{countLessons},
            1,
            #{date},
            #{countShifts},
            0,
            #{price},
            0,
            0,
            1,
            #{contractType},
            #{trial},
            #{contractOptionId},
            #{days});
        <selectKey resultType="int" keyProperty="id" order="AFTER">
            SELECT LAST_INSERT_ID();
        </selectKey>
    </insert>

    <select id="selectContractTypes" resultType="SimpleModel">
        SELECT *
        FROM contractsType
    </select>

    <select id="selectContractOptions" resultType="ContractOptionModel">
        SELECT *
        FROM contractOption
    </select>

    <select id="getContractOptionById" parameterType="int" resultType="ContractOptionModel">
        SELECT *
        FROM contractOption
        WHERE id = #{id}
    </select>

    <select id="findContract" parameterType="map" resultType="ContractModel">
        SELECT *
        FROM contracts
        WHERE contracts.clientId = #{client}
        AND contracts.teacherTypeId = #{type}
        AND contracts.date = #{date}
        AND contracts.countLessons = #{count}
    </select>

    <update id="updateTransferById" parameterType="int">
        UPDATE contracts SET
        contracts.countShifts = contracts.countShifts + 1
        WHERE
        contracts.id = #{id}
    </update>

    <select id="getCountPlannedLessons" parameterType="int" resultType="int">
        SELECT COUNT(*)
        FROM lessons l
        WHERE l.contractId=#{id}
        AND l.statusId=1;
    </select>

    <select id="getCompletedLessonCount" resultType="int">
        SELECT COUNT(l.id)
        FROM lessons l
        WHERE l.contractId = #{contractId}
          AND l.statusId != 1;
    </select>

    <update id="updateStatus" parameterType="map">
        UPDATE contracts SET
        contracts.statusId = #{contractStatus}
        WHERE
        contracts.id = #{contractId}
    </update>

    <update id="updateActive" parameterType="map">
        UPDATE contracts SET
        contracts.active = #{active}
        WHERE
        contracts.id = #{contractId}
    </update>

    <update id="updateCash" parameterType="map">
        UPDATE contracts SET
        contracts.cash = #{cash}
        WHERE
        contracts.id = #{contractId}
    </update>

    <update id="freezeContract" parameterType="ContractModel">
        UPDATE contracts
        SET freezed = #{freezed},
            freezeDate = #{freezeDate},
            freezeFinishDate = #{freezeFinishDate}
        WHERE id = #{id}
    </update>

    <select id="getContractsByLastLessonDate" parameterType="String" resultMap="result">
       SELECT con.id,
              con.clientId,
              cl.fname as clientFS,
              cl.lname as clientLS,
              cl.phone1 as comment,
              t.name as teacherS,
              ty.name as typeS
       FROM contracts con
       INNER JOIN clients cl
         ON cl.id = con.clientId
       INNER JOIN J_TEACHERS_TYPES jtt
         ON jtt.id = con.teacherTypeId
       INNER JOIN teachers t
         ON t.id = jtt.teacherId
       INNER JOIN types ty
         ON ty.id = jtt.typeId
       INNER JOIN lessons l
         ON l.contractId = con.id AND l.statusId = 1
       GROUP BY con.id
       HAVING (COUNT(l.id) = 1 AND MAX(l.date) = #{lastLessonDate})
    </select>

    <delete id="deleteContract" parameterType="int">
        DELETE FROM lessons
        WHERE contractId = #{contractId};

        DELETE FROM J_CONTRACTS
        WHERE fromId = #{contractId} OR toId = #{contractId};

        DELETE FROM J_DISCOUNTS
        WHERE contractId = #{contractId};

        DELETE FROM payments
        WHERE contractId = #{contractId};

        DELETE FROM contracts
        WHERE id = #{contractId};
    </delete>

    <delete id="deletePlannedLessons">
        DELETE FROM lessons
        WHERE contractId = #{contractId}
          AND statusId = 1
    </delete>

    <select id="getDonePaymentsTotal" parameterType="int" resultType="int">
        SELECT COALESCE(SUM(p.value), 0)
          FROM payments p
          WHERE p.done = 1
            AND p.contractId = #{contractId}
    </select>

    <select id="getMoneySpentOnLessons" parameterType="int" resultType="int">
        SELECT
          COALESCE(
            SUM(
              CASE c.contractType
                WHEN 1 THEN IF(jtt.pPrice != 0, jtt.pPrice, COALESCE(pd.pPrice, 0))
                WHEN 2 THEN IF(jtt.gPrice != 0, jtt.gPrice, COALESCE(pd.gPrice, 0))
                WHEN 3 THEN IF(jtt.dPrice != 0, jtt.dPrice, COALESCE(pd.dPrice, 0))
                WHEN 4 THEN IF(jtt.aPrice != 0, jtt.aPrice, COALESCE(pd.aPrice, 0))
                ELSE 0
              END
              ),
            0)
        FROM contracts c
        INNER JOIN J_TEACHERS_TYPES jtt
          ON jtt.id = c.teacherTypeId
        LEFT JOIN prices_default pd
          ON pd.typeId = jtt.typeId
        INNER JOIN lessons l
          ON l.contractId = c.id
        WHERE c.id = #{contractId}
          AND l.statusId != 1
    </select>

    <select id="getWriteoffTotal" parameterType="int" resultType="int">
        SELECT COALESCE(SUM(c.writeoff), 0)
        FROM contracts c
        WHERE c.id = #{contractId}
    </select>

    <update id="writeoff" >
        UPDATE contracts
        SET writeoff = #{value}
        WHERE id = #{contractId}
    </update>

</mapper>